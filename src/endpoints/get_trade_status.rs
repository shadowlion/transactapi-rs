use serde::{Deserialize, Serialize};

use crate::TransactApiClient;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetTradeStatusPayload {
    #[serde(rename = "clientID")]
    client_id: String,
    #[serde(rename = "developerAPIKey")]
    developer_api_key: String,
    #[serde(rename = "tradeId")]
    trade_id: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TradeDetail {
    id: String,
    #[serde(rename = "developerAPIKey")]
    developer_api_key: String,
    #[serde(rename = "offeringId")]
    offering_id: String,
    #[serde(rename = "accountId")]
    account_id: String,
    #[serde(rename = "partyId")]
    party_id: String,
    party_type: String,
    #[serde(rename = "escrowId")]
    escrow_id: String,
    #[serde(rename = "orderId")]
    order_id: String,
    #[serde(rename = "transactionType")]
    transaction_type: String,
    #[serde(rename = "totalAmount")]
    total_amount: String,
    #[serde(rename = "totalShares")]
    total_shares: String,
    #[serde(rename = "orderStatus")]
    order_status: String,
    #[serde(rename = "createdDate")]
    created_date: String,
    #[serde(rename = "createdIpAddress")]
    created_ip_address: String,
    errors: String,
    #[serde(rename = "documentKey")]
    document_key: String,
    #[serde(rename = "esignStatus")]
    esign_status: String,
    users: String,
    archived_status: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GetTradeStatusResponse {
    #[serde(rename = "statusCode")]
    pub status_code: String,
    #[serde(rename = "statusDesc")]
    pub status_description: String,
    #[serde(rename = "tradeDetails")]
    pub trade_details: Vec<TradeDetail>,
}

impl TransactApiClient {
    /// # Get Trade Status
    ///
    /// This method is used to retrieve the status and all other current information for a specific
    /// trade. The TradeID is required as a request parameter for this method.
    ///
    /// Reference: https://api.norcapsecurities.com/admin_v3/documentation?mid=MjM0
    ///
    /// ## Arguments:
    ///
    /// - `trade_id` - Trade ID generated by the API.
    pub async fn get_trade_status(
        &self,
        trade_id: String,
    ) -> Result<GetTradeStatusResponse, reqwest::Error> {
        let payload = GetTradeStatusPayload {
            client_id: self.client_id.to_owned(),
            developer_api_key: self.developer_api_key.to_owned(),
            trade_id,
        };

        let resp =
            TransactApiClient::post_request::<GetTradeStatusPayload, GetTradeStatusResponse>(
                self,
                "getTradeStatus".to_owned(),
                &payload,
            )
            .await?;

        Ok(resp)
    }
}
