// mod endpoints;

// #[derive(Debug, Serialize, Deserialize)]
// pub struct TransactApiClient {
//     #[serde(rename = "clientID")]
//     pub client_id: String,
//     #[serde(rename = "developerAPIKey")]
//     pub developer_api_key: String,
//     pub sandbox: bool,
// }

// #[derive(Debug, Serialize, Deserialize)]
// struct GetOfferingPayload {
//     #[serde(rename = "clientID")]
//     client_id: String,
//     #[serde(rename = "developerAPIKey")]
//     developer_api_key: String,
//     #[serde(rename = "offeringId")]
//     offering_id: String,
// }

// #[derive(Debug, Serialize, Deserialize)]
// pub struct OfferingDetail {
//     #[serde(rename = "offeringId")]
//     pub offering_id: String,
// }

// #[derive(Debug, Serialize, Deserialize)]
// pub struct GetOfferingResponse {
//     #[serde(rename = "statusCode")]
//     pub status_code: String,
//     #[serde(rename = "statusDesc")]
//     pub status_description: String,
//     #[serde(rename = "offeringDetails")]
//     pub offering_details: Vec<OfferingDetail>,
// }

// #[derive(Debug, Serialize, Deserialize)]
// struct ValidateAbaRoutingNumberPayload {
//     #[serde(rename = "clientID")]
//     client_id: String,
//     #[serde(rename = "developerAPIKey")]
//     developer_api_key: String,
//     #[serde(rename = "routingNumber")]
//     routing_number: String,
// }

// #[derive(Debug, Serialize, Deserialize)]
// pub struct ValidateAbaRoutingNumberResponse {
//     #[serde(rename = "statusCode")]
//     pub status_code: String,
//     #[serde(rename = "statusDesc")]
//     pub status_description: String,
//     #[serde(rename = "accountDetails")]
//     pub account_details: String,
// }

// impl TransactApiClient {
//     /// Returns a url that will access the TransactApi server.
//     ///
//     /// # Arguments
//     ///
//     /// - `&self` - struct instance of the TransactApi client. Houses `sandbox` to determine if
//     /// we're using sandbox credentials.
//     fn base_url(&self) -> String {
//         let mut prefix: &str = "api";
//         if self.sandbox {
//             prefix = "api-sandboxdash";
//         }
//         format!(
//             "https://{}.norcapsecurities.com/tapiv3/index.php/v3/",
//             prefix
//         )
//     }

//     /// This method is used to get all the details of an offering. The Offering ID is required to
//     /// get the information.
//     ///
//     /// Reference: https://api.norcapsecurities.com/admin_v3/documentation?mid=MTY4
//     ///
//     /// # Arguments:
//     ///
//     /// - `offering_id` - Offering ID that is generated by the API when an Offering is created
//     /// (createOffering).
//     pub async fn get_offering(
//         &self,
//         offering_id: String,
//     ) -> Result<GetOfferingResponse, reqwest::Error> {
//         let url = TransactApiClient::base_url(&self).to_owned() + "getOffering";
//         let get_offering_payload = GetOfferingPayload {
//             client_id: self.client_id.to_owned(),
//             developer_api_key: self.developer_api_key.to_owned(),
//             offering_id,
//         };
//         let client = reqwest::Client::new();
//         let res: GetOfferingResponse = client
//             .post(url)
//             .json(&get_offering_payload)
//             .send()
//             .await?
//             .json()
//             .await?;
//         Ok(res)
//     }

//     /// This method is used to validate the routing number for an external account
//     /// (via `createExternalAccount`).
//     ///
//     /// Reference: https://api.norcapsecurities.com/admin_v3/documentation?mid=MjU1
//     ///
//     /// # Arguments
//     ///
//     /// - `routing_number` - The routing number to be validated
//     pub async fn validate_aba_routing_number(
//         &self,
//         routing_number: String,
//     ) -> Result<ValidateAbaRoutingNumberResponse, reqwest::Error> {
//         let url = TransactApiClient::base_url(&self).to_owned() + "validateABARoutingNumber";
//         let get_offering_payload = ValidateAbaRoutingNumberPayload {
//             client_id: self.client_id.to_owned(),
//             developer_api_key: self.developer_api_key.to_owned(),
//             routing_number,
//         };
//         let client = reqwest::Client::new();
//         let res: ValidateAbaRoutingNumberResponse = client
//             .post(url)
//             .json(&get_offering_payload)
//             .send()
//             .await?
//             .json()
//             .await?;
//         Ok(res)
//     }
// }

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactApiClient {
    #[serde(rename = "clientID")]
    pub client_id: String,
    #[serde(rename = "developerAPIKey")]
    pub developer_api_key: String,
    pub sandbox: bool,
}

mod endpoints;
use endpoints::get_offering::{GetOfferingPayload, GetOfferingResponse};

impl TransactApiClient {
    pub fn new(client_id: String, developer_api_key: String, sandbox: bool) -> TransactApiClient {
        TransactApiClient {
            client_id,
            developer_api_key,
            sandbox,
        }
    }

    pub async fn get_offering(
        payload: GetOfferingPayload,
    ) -> Result<GetOfferingResponse, reqwest::Error> {
        let resp = endpoints::get_offering::get_offering(payload).await?;
        Ok(resp)
    }
}
